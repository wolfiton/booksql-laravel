"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A datetime and timezone string in ISO 8601 format `Y-m-dTH:i:sO`, e.g. `2020-04-20T13:53:12+02:00`."
scalar DateTimeTz
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeTz")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find

    books: [Book] @all
    book(id: ID @eq): Book @find
    booksByFeatured(featured: Boolean! @eq): [Book] @all
    someComplexQuery(search: String!): [Book]

    categories: [Category] @all
    category(id: ID @eq): Category @find
}

type Mutation {
    # createUser(
    #     name: String @rules(apply: ["required"])
    #     email: String @rules(apply: ["required", "email", "unique:users,email"])
    # ): User @create(model: "App\\User")
    # updateUser(
    #     id: ID @rules(apply: ["required"])
    #     name: String
    #     email: String @rules(apply: ["email"])
    # ): User @update(model: "App\\User")
    # deleteUser(
    #     id: ID @rules(apply: ["required"])
    # ): User @delete(model: "App\\User")

    createCategory(input: CreateCategoryInput! @spread): Category @create

    updateCategory(input: UpdateCategoryInput! @spread): Category @update

    deleteCategory(input: DeleteCategoryInput! @spread): Category @delete

    createBook(input: CreateBookInput! @spread): Book @create

    updateBook(input: UpdateBookInput! @spread): Book @update

    deleteBook(input: DeleteBookInput! @spread): Book @delete
}
# Category inputs
input CreateCategoryBelongsTo {
    connect: ID
    create: CreateCategoryInput
    update: UpdateCategoryInput
    delete: DeleteCategoryInput
}

input CreateCategoryInput {
    name: String @rules(apply: ["required", "unique:categories,name"])
}

input UpdateCategoryInput {
    id: ID @rules(apply: ["required"])
    name: String @rules(apply: ["required", "unique:categories,name"])
}

input DeleteCategoryInput {
    id: ID! @rules(apply: ["required"])
}

# Book inputs
input CreateBookInput {
    title: String! @rules(apply: ["required"])
    author: String! @rules(apply: ["required"])
    image: String
    link: String
    description: String
    featured: Boolean
    category: CreateCategoryBelongsTo
}

input UpdateBookInput {
    id: ID @rules(apply: ["required"])
    title: String! @rules(apply: ["required"])
    author: String! @rules(apply: ["required"])
    image: String
    link: String
    description: String
    featured: Boolean
    category: CreateCategoryBelongsTo
}

input DeleteBookInput {
    id: ID! @rules(apply: ["required"])
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Book {
    id: ID!
    title: String!
    author: String!
    image: String!
    link: String!
    description: String!
    featured: Boolean
    category: Category! @belongsTo
}

type Category {
    id: ID!
    name: String!
    books: [Book]! @hasMany
}
